/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2021-09-08 15:02:56 EDT)
 * on 2021-09-08 at 19:02:57 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.businesscommunications.v1.model;

/**
 * Configuration to enable non-local entry points.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Business Communications. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NonLocalConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. List of phone numbers for call deflection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Phone> callDeflectionPhoneNumbers;

  static {
    // hack to force ProGuard to consider Phone used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Phone.class);
  }

  /**
   * Required. Contact information for the agent that displays with the messaging button.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ContactOption contactOption;

  /**
   * Required. Domains to enable for the sitelinks entry point.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> enabledDomains;

  /**
   * Required. Agent's phone number. Overrides the `phone` field for conversations started from non-
   * local entry points. This phone number will be used for all configured regions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Phone phoneNumber;

  /**
   * Required. List of [CLDR region codes](https://www.iana.org/assignments/language-subtag-
   * registry/language-subtag-registry) for countries where the agent is allowed to launch
   * `NON_LOCAL` entry points. Required for `NON_LOCAL` entry points.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> regionCodes;

  /**
   * Required. List of phone numbers for call deflection.
   * @return value or {@code null} for none
   */
  public java.util.List<Phone> getCallDeflectionPhoneNumbers() {
    return callDeflectionPhoneNumbers;
  }

  /**
   * Required. List of phone numbers for call deflection.
   * @param callDeflectionPhoneNumbers callDeflectionPhoneNumbers or {@code null} for none
   */
  public NonLocalConfig setCallDeflectionPhoneNumbers(java.util.List<Phone> callDeflectionPhoneNumbers) {
    this.callDeflectionPhoneNumbers = callDeflectionPhoneNumbers;
    return this;
  }

  /**
   * Required. Contact information for the agent that displays with the messaging button.
   * @return value or {@code null} for none
   */
  public ContactOption getContactOption() {
    return contactOption;
  }

  /**
   * Required. Contact information for the agent that displays with the messaging button.
   * @param contactOption contactOption or {@code null} for none
   */
  public NonLocalConfig setContactOption(ContactOption contactOption) {
    this.contactOption = contactOption;
    return this;
  }

  /**
   * Required. Domains to enable for the sitelinks entry point.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEnabledDomains() {
    return enabledDomains;
  }

  /**
   * Required. Domains to enable for the sitelinks entry point.
   * @param enabledDomains enabledDomains or {@code null} for none
   */
  public NonLocalConfig setEnabledDomains(java.util.List<java.lang.String> enabledDomains) {
    this.enabledDomains = enabledDomains;
    return this;
  }

  /**
   * Required. Agent's phone number. Overrides the `phone` field for conversations started from non-
   * local entry points. This phone number will be used for all configured regions.
   * @return value or {@code null} for none
   */
  public Phone getPhoneNumber() {
    return phoneNumber;
  }

  /**
   * Required. Agent's phone number. Overrides the `phone` field for conversations started from non-
   * local entry points. This phone number will be used for all configured regions.
   * @param phoneNumber phoneNumber or {@code null} for none
   */
  public NonLocalConfig setPhoneNumber(Phone phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Required. List of [CLDR region codes](https://www.iana.org/assignments/language-subtag-
   * registry/language-subtag-registry) for countries where the agent is allowed to launch
   * `NON_LOCAL` entry points. Required for `NON_LOCAL` entry points.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRegionCodes() {
    return regionCodes;
  }

  /**
   * Required. List of [CLDR region codes](https://www.iana.org/assignments/language-subtag-
   * registry/language-subtag-registry) for countries where the agent is allowed to launch
   * `NON_LOCAL` entry points. Required for `NON_LOCAL` entry points.
   * @param regionCodes regionCodes or {@code null} for none
   */
  public NonLocalConfig setRegionCodes(java.util.List<java.lang.String> regionCodes) {
    this.regionCodes = regionCodes;
    return this;
  }

  @Override
  public NonLocalConfig set(String fieldName, Object value) {
    return (NonLocalConfig) super.set(fieldName, value);
  }

  @Override
  public NonLocalConfig clone() {
    return (NonLocalConfig) super.clone();
  }

}
